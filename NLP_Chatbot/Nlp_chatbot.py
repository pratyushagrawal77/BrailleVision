# -*- coding: utf-8 -*-
"""NLP_Chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/117WqVaZKnUFRLvPIs_AQ0xlevpLI0ha9
"""

def train_and_run_chatbot(model_path):
    # Load and process the data
    file_path = "cleaned_faq_questions_answers.csv"
    data = pd.read_csv(file_path, encoding='ISO-8859-1')

    # Format the data
    data['formatted'] = data.apply(
        lambda row: f"<s>[INST] <<SYS>>\nSystem prompt\n<</SYS>>\n{row['FAQ Questions']} [/INST] {row['Answers']} </s>",
        axis=1
    )

    # Load data into Dataset format
    dataset = Dataset.from_pandas(data[['formatted']])
    dataset = dataset.rename_column("formatted", "text")

    # Model and training configuration
    lora_r, lora_alpha, lora_dropout = 64, 16, 0.1
    use_4bit, bnb_4bit_quant_type, use_nested_quant = True, "nf4", False
    output_dir, num_train_epochs = "./results", 10
    per_device_train_batch_size, gradient_accumulation_steps = 4, 1
    gradient_checkpointing, learning_rate = True, 2e-4
    weight_decay, optim, lr_scheduler_type = 0.001, "paged_adamw_32bit", "cosine"
    warmup_ratio, group_by_length, save_steps, logging_steps = 0.03, True, 0, 25
    device_map = {"": 0}

    # Load base model with quantization config
    bnb_config = BitsAndBytesConfig(
        load_in_4bit=use_4bit,
        bnb_4bit_quant_type=bnb_4bit_quant_type,
        bnb_4bit_compute_dtype=torch.float16,
        bnb_4bit_use_double_quant=use_nested_quant,
    )

    model = AutoModelForCausalLM.from_pretrained(model_path, quantization_config=bnb_config, device_map=device_map)
    model.config.use_cache = False
    model.config.pretraining_tp = 1

    tokenizer = AutoTokenizer.from_pretrained(model_path, trust_remote_code=True)
    tokenizer.pad_token = tokenizer.eos_token
    tokenizer.padding_side = "right"

    # Configure and train model
    peft_config = LoraConfig(lora_alpha=lora_alpha, lora_dropout=lora_dropout, r=lora_r, bias="none", task_type="CAUSAL_LM")
    training_arguments = TrainingArguments(
        output_dir=output_dir,
        num_train_epochs=num_train_epochs,
        per_device_train_batch_size=per_device_train_batch_size,
        gradient_accumulation_steps=gradient_accumulation_steps,
        optim=optim,
        save_steps=save_steps,
        logging_steps=logging_steps,
        learning_rate=learning_rate,
        weight_decay=weight_decay,
        fp16=False,
        bf16=False,
        max_grad_norm=0.3,
        max_steps=-1,
        warmup_ratio=warmup_ratio,
        group_by_length=group_by_length,
        lr_scheduler_type=lr_scheduler_type,
        report_to="tensorboard"
    )

    trainer = SFTTrainer(
        model=model,
        train_dataset=dataset,
        peft_config=peft_config,
        dataset_text_field="text",
        max_seq_length=None,
        tokenizer=tokenizer,
        args=training_arguments,
        packing=False,
    )

    trainer.train()
    trainer.model.save_pretrained("Llama-2-7b-chat-finetune")

    # Run chatbot with prompt
    prompt = "What is Braille Vision?"
    pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=200)
    result = pipe(f"[INST] {prompt} [/INST]")
    return result[0]['generated_text']